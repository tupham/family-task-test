@page "/manage-tasks"
@inject HttpClient Http
@using FamilyTask.Components
@using FamilyTask.Shared.Components
@using Domain.Queries;
@inherits TasksBase

@if(isLoaded) {
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu MenuItems="@leftMenuItem" OnAddItem="@onAddItem"/>
        </div>
        <div class="col-8 p-0">
            @if (showLister) {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task" @bind-Text="@task.text"/>
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4" @onclick="@onAddTaskClick">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@tasksToShow"/>
                </div>
            }
            @if(showCreator) {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
                </div>
            }
        </div>
    </div>
}

@code {
    private List<FamilyMember> members;
    private MenuItem[] leftMenuItem;
    private List<TaskModel> tasksToShow;
    private List<TaskModel> allTasks;
    private bool isLoaded;
    private bool showLister;
    private bool showCreator;
    private TaskModel task = new TaskModel();
    private Guid selected_member_id = new Guid();
    protected override async Task OnInitializedAsync () {
        //members = await Http.GetFromJsonAsync<FamilyMember[]> ("sample-data/family-members.json");
        //allTasks = await Http.GetFromJsonAsync<TaskModel[]> ("sample-data/tasks.json");
        members = new List<FamilyMember>();
        allTasks = new List<TaskModel>();
        tasksToShow = new List<TaskModel>();
        var result = await this.MemberDataService.GetAllMembers();
        if (result != null && result.Payload != null && result.Payload.Any())
        {
            foreach (var item in result.Payload)
            {
                members.Add(new FamilyMember()
                {
                    avtar = item.Avatar,
                    email = item.Email,
                    firstname = item.FirstName,
                    lastname = item.LastName,
                    role = item.Roles,
                    id = item.Id
                });
            }
        }

        var taskResults = await this.TaskDataService.GetAllTasks();
        if(taskResults!=null && taskResults.Payload !=null && taskResults.Payload.Any())
        {
            foreach(var taskItem in taskResults.Payload)
            {
                allTasks.Add(new TaskModel() {
                    text = taskItem.Subject,
                    isDone = taskItem.IsComplete,
                    member = new FamilyMember(){
                        firstname = taskItem.Member.FirstName,
                        lastname = taskItem.Member.LastName,
                        id = taskItem.Member.Id
                    }
                });
            }
        }


        leftMenuItem = new MenuItem[members.Count() + 1];
        leftMenuItem[0] = new MenuItem {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };
        leftMenuItem[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Count() + 1; i++)
        {
            leftMenuItem[i] = new MenuItem {
                iconColor = members[i-1].avtar,
                label = members[i-1].firstname,
                referenceId = members[i-1].id,
                isActive = false
            };
            leftMenuItem[i].ClickCallback += onItemClick;
        }
        showAllTasks(null, leftMenuItem[0]);
        isLoaded = true;
    }

    private void onAddItem() {
        showLister = false;
        showCreator = true;
        makeMenuItemActive(null);
        StateHasChanged();
    }

    private void onItemClick(object sender, object e) {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        this.selected_member_id = val;
        makeMenuItemActive(e);
        if(allTasks != null && allTasks.Count() > 0) {
            tasksToShow = allTasks.Where(item => {
                if (item.member != null)
                {
                    if(item.member.id == val)
                    {
                        return true;
                    }
                }
                return false;
            }).Select(x=>x).ToList();
        }
        showLister = true;
        showCreator = false;
        StateHasChanged();
    }
    private void showAllTasks(object sender, object e) {
        tasksToShow = allTasks;
        showLister = true;
        showCreator = false;
        makeMenuItemActive(e);
        StateHasChanged();
    }

    private void makeMenuItemActive(object e) {
        foreach (var item in leftMenuItem)
        {
            item.isActive = false;
        }
        if(e != null) {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }

    private void onMemberAdd() {
        Console.WriteLine("on member add");
    }

    private async void onAddTaskClick()
    {
        Console.WriteLine("on task add");
        Console.WriteLine("task: {0}", this.task.text);
        var result = await TaskDataService.Create(new Domain.Commands.CreateTaskCommand() { Subject = this.task.text, IsComplete = false, AssignedToId= selected_member_id });
        if (result!=null && result.Payload != null)
        {
            var taskvm = result.Payload;
            var taskModel = new TaskModel();
            taskModel.id = taskvm.Id;
            taskModel.isDone = taskvm.IsComplete;
            taskModel.text = taskvm.Subject;
            if (taskvm.Member != null)
            {
                var memberDomain = taskvm.Member;
                taskModel.member = new FamilyMember() { id = memberDomain.Id, firstname = memberDomain.FirstName, lastname = memberDomain.LastName};

            }
            Console.WriteLine(taskModel);
            this.allTasks.Add(taskModel);
            this.tasksToShow.Add(taskModel);
            this.task.text = string.Empty;
            StateHasChanged();
        }
    }
}